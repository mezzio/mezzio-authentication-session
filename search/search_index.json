{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"mezzio-authentication-session üá∑üá∫ –†—É—Å—Å–∫–∏–º –≥—Ä–∞–∂–¥–∞–Ω–∞–º –ú—ã, —É—á–∞—Å—Ç–Ω–∏–∫–∏ Laminas, —Ä–æ–¥–∏–ª–∏—Å—å –∏ –∂–∏–≤–µ–º –≤ —Ä–∞–∑–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∞—Ö. –£ –º–Ω–æ–≥–∏—Ö –∏–∑ –Ω–∞—Å –µ—Å—Ç—å –¥—Ä—É–∑—å—è, —Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏–∫–∏ –∏ –∫–æ–ª–ª–µ–≥–∏ –∫–∞–∫ –≤ –†–æ—Å—Å–∏–∏, —Ç–∞–∫ –∏ –≤ –£–∫—Ä–∞–∏–Ω–µ. –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∏–∑ –Ω–∞—Å —Ä–æ–¥–∏–ª–∏—Å—å –≤ –†–æ—Å—Å–∏–∏. –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∏–∑ –Ω–∞—Å –∂–∏–≤—É—Ç –≤ –†–æ—Å—Å–∏–∏. –£ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –±–∞–±—É—à–∫–∏ –∏ –¥–µ–¥—É—à–∫–∏ —Å—Ä–∞–∂–∞–ª–∏—Å—å —Å —Ñ–∞—à–∏—Å—Ç–∞–º–∏ –≤–æ –í—Ç–æ—Ä–æ–π –º–∏—Ä–æ–≤–æ–π –≤–æ–π–Ω–µ. –ó–¥–µ—Å—å –Ω–∏–∫—Ç–æ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ñ–∞—à–∏–∑–º. –£ –æ–¥–Ω–æ–≥–æ –∏–∑ –Ω–∞—Å –µ—Å—Ç—å —É–∫—Ä–∞–∏–Ω—Å–∫–∞—è —Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏—Ü–∞, –∫–æ—Ç–æ—Ä–∞—è —Å–ø–∞—Å–ª–∞—Å—å –∏–∑ –¥–æ–º–∞ –≤–º–µ—Å—Ç–µ —Å —Å—ã–Ω–æ–º. –ü–æ–µ–∑–¥ –∑–∞–¥–µ—Ä–∂–∞–ª—Å—è –∏–∑-–∑–∞ –±–æ–º–±–µ–∂–∫–∏ –Ω–∞ –¥–æ—Ä–æ–≥–µ –≤–ø–µ—Ä–µ–¥–∏. –£ –Ω–∞—Å –µ—Å—Ç—å –¥—Ä—É–∑—å—è, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä—è—á—É—Ç—Å—è –≤ –±–æ–º–±–æ—É–±–µ–∂–∏—â–∞—Ö. –ú—ã —Å —Ç—Ä–µ–≤–æ–≥–æ–π –∂–¥–µ–º –≤–µ—Å—Ç–æ—á–∫–∏ –æ—Ç –Ω–∏—Ö –ø–æ—Å–ª–µ –≤–æ–∑–¥—É—à–Ω—ã—Ö –Ω–∞–ª–µ—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –±–µ—Å–ø–æ—Ä—è–¥–æ—á–Ω–æ –Ω–∞–Ω–æ—Å—è—Ç —É–¥–∞—Ä—ã –∏ –ø–æ–ø–∞–¥–∞—é—Ç –ø–æ –±–æ–ª—å–Ω–∏—Ü–∞–º, —à–∫–æ–ª–∞–º, –¥–µ—Ç—Å–∫–∏–º —Å–∞–¥–∞–º –∏ –¥–æ–º–∞–º. –ú—ã –Ω–µ –±–µ—Ä–µ–º —ç—Ç–æ –∏–∑ –∫–∞–∫–∏—Ö-–ª–∏–±–æ –°–ú–ò. –ú—ã –Ω–∞–±–ª—é–¥–∞–µ–º —ç—Ç–æ –Ω–∞–ø—Ä—è–º—É—é. –í—ã –¥–æ–≤–µ—Ä—è–µ—Ç–µ –Ω–∞–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, —á—Ç–æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞—à–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã, –∏ –º—ã –ø—Ä–æ—Å–∏–º –≤–∞—Å –¥–æ–≤–µ—Ä–∏—Ç—å—Å—è –Ω–∞–º –≤–Ω–æ–≤—å. –ú—ã –Ω—É–∂–¥–∞–µ–º—Å—è –≤ –ø–æ–º–æ—â–∏. –í—ã—Ö–æ–¥–∏—Ç–µ –∏ –ø—Ä–æ—Ç–µ—Å—Ç—É–π—Ç–µ –ø—Ä–æ—Ç–∏–≤ —ç—Ç–æ–π –±–µ—Å–ø–æ–ª–µ–∑–Ω–æ–π –≤–æ–π–Ω—ã. –û—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∫—Ä–æ–≤–æ–ø—Ä–æ–ª–∏—Ç–∏–µ. –°–∫–∞–∂–∏—Ç–µ \"–ù–µ—Ç –≤–æ–π–Ω–µ!\" üá∫üá∏ To Citizens of Russia We at Laminas come from all over the world. Many of us have friends, family and colleagues in both Russia and Ukraine. Some of us were born in Russia. Some of us currently live in Russia. Some have grandparents who fought Nazis in World War II. Nobody here supports fascism. One team member has a Ukrainian relative who fled her home with her son. The train was delayed due to bombing on the road ahead. We have friends who are hiding in bomb shelters. We anxiously follow up on them after the air raids, which indiscriminately fire at hospitals, schools, kindergartens and houses. We're not taking this from any media. These are our actual experiences. You trust us enough to use our software. We ask that you trust us to say the truth on this. We need your help. Go out and protest this unnecessary war. Stop the bloodshed. Say \"stop the war!\" This library provides a mezzio-authentication adapter that handles form-based username/password authentication credentials where the user details are subsequently stored in a session. Installation Run the following to install this library: $ composer require mezzio/mezzio-authentication-session Documentation Documentation is in the doc tree , and can be compiled using mkdocs : $ mkdocs build You may also browse the documentation online .","title":"Home"},{"location":"#mezzio-authentication-session","text":"","title":"mezzio-authentication-session"},{"location":"#_1","text":"–ú—ã, —É—á–∞—Å—Ç–Ω–∏–∫–∏ Laminas, —Ä–æ–¥–∏–ª–∏—Å—å –∏ –∂–∏–≤–µ–º –≤ —Ä–∞–∑–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∞—Ö. –£ –º–Ω–æ–≥–∏—Ö –∏–∑ –Ω–∞—Å –µ—Å—Ç—å –¥—Ä—É–∑—å—è, —Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏–∫–∏ –∏ –∫–æ–ª–ª–µ–≥–∏ –∫–∞–∫ –≤ –†–æ—Å—Å–∏–∏, —Ç–∞–∫ –∏ –≤ –£–∫—Ä–∞–∏–Ω–µ. –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∏–∑ –Ω–∞—Å —Ä–æ–¥–∏–ª–∏—Å—å –≤ –†–æ—Å—Å–∏–∏. –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∏–∑ –Ω–∞—Å –∂–∏–≤—É—Ç –≤ –†–æ—Å—Å–∏–∏. –£ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –±–∞–±—É—à–∫–∏ –∏ –¥–µ–¥—É—à–∫–∏ —Å—Ä–∞–∂–∞–ª–∏—Å—å —Å —Ñ–∞—à–∏—Å—Ç–∞–º–∏ –≤–æ –í—Ç–æ—Ä–æ–π –º–∏—Ä–æ–≤–æ–π –≤–æ–π–Ω–µ. –ó–¥–µ—Å—å –Ω–∏–∫—Ç–æ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ñ–∞—à–∏–∑–º. –£ –æ–¥–Ω–æ–≥–æ –∏–∑ –Ω–∞—Å –µ—Å—Ç—å —É–∫—Ä–∞–∏–Ω—Å–∫–∞—è —Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏—Ü–∞, –∫–æ—Ç–æ—Ä–∞—è —Å–ø–∞—Å–ª–∞—Å—å –∏–∑ –¥–æ–º–∞ –≤–º–µ—Å—Ç–µ —Å —Å—ã–Ω–æ–º. –ü–æ–µ–∑–¥ –∑–∞–¥–µ—Ä–∂–∞–ª—Å—è –∏–∑-–∑–∞ –±–æ–º–±–µ–∂–∫–∏ –Ω–∞ –¥–æ—Ä–æ–≥–µ –≤–ø–µ—Ä–µ–¥–∏. –£ –Ω–∞—Å –µ—Å—Ç—å –¥—Ä—É–∑—å—è, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä—è—á—É—Ç—Å—è –≤ –±–æ–º–±–æ—É–±–µ–∂–∏—â–∞—Ö. –ú—ã —Å —Ç—Ä–µ–≤–æ–≥–æ–π –∂–¥–µ–º –≤–µ—Å—Ç–æ—á–∫–∏ –æ—Ç –Ω–∏—Ö –ø–æ—Å–ª–µ –≤–æ–∑–¥—É—à–Ω—ã—Ö –Ω–∞–ª–µ—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –±–µ—Å–ø–æ—Ä—è–¥–æ—á–Ω–æ –Ω–∞–Ω–æ—Å—è—Ç —É–¥–∞—Ä—ã –∏ –ø–æ–ø–∞–¥–∞—é—Ç –ø–æ –±–æ–ª—å–Ω–∏—Ü–∞–º, —à–∫–æ–ª–∞–º, –¥–µ—Ç—Å–∫–∏–º —Å–∞–¥–∞–º –∏ –¥–æ–º–∞–º. –ú—ã –Ω–µ –±–µ—Ä–µ–º —ç—Ç–æ –∏–∑ –∫–∞–∫–∏—Ö-–ª–∏–±–æ –°–ú–ò. –ú—ã –Ω–∞–±–ª—é–¥–∞–µ–º —ç—Ç–æ –Ω–∞–ø—Ä—è–º—É—é. –í—ã –¥–æ–≤–µ—Ä—è–µ—Ç–µ –Ω–∞–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, —á—Ç–æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞—à–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã, –∏ –º—ã –ø—Ä–æ—Å–∏–º –≤–∞—Å –¥–æ–≤–µ—Ä–∏—Ç—å—Å—è –Ω–∞–º –≤–Ω–æ–≤—å. –ú—ã –Ω—É–∂–¥–∞–µ–º—Å—è –≤ –ø–æ–º–æ—â–∏. –í—ã—Ö–æ–¥–∏—Ç–µ –∏ –ø—Ä–æ—Ç–µ—Å—Ç—É–π—Ç–µ –ø—Ä–æ—Ç–∏–≤ —ç—Ç–æ–π –±–µ—Å–ø–æ–ª–µ–∑–Ω–æ–π –≤–æ–π–Ω—ã. –û—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∫—Ä–æ–≤–æ–ø—Ä–æ–ª–∏—Ç–∏–µ. –°–∫–∞–∂–∏—Ç–µ \"–ù–µ—Ç –≤–æ–π–Ω–µ!\"","title":"üá∑üá∫ –†—É—Å—Å–∫–∏–º –≥—Ä–∞–∂–¥–∞–Ω–∞–º"},{"location":"#to-citizens-of-russia","text":"We at Laminas come from all over the world. Many of us have friends, family and colleagues in both Russia and Ukraine. Some of us were born in Russia. Some of us currently live in Russia. Some have grandparents who fought Nazis in World War II. Nobody here supports fascism. One team member has a Ukrainian relative who fled her home with her son. The train was delayed due to bombing on the road ahead. We have friends who are hiding in bomb shelters. We anxiously follow up on them after the air raids, which indiscriminately fire at hospitals, schools, kindergartens and houses. We're not taking this from any media. These are our actual experiences. You trust us enough to use our software. We ask that you trust us to say the truth on this. We need your help. Go out and protest this unnecessary war. Stop the bloodshed. Say \"stop the war!\" This library provides a mezzio-authentication adapter that handles form-based username/password authentication credentials where the user details are subsequently stored in a session.","title":"üá∫üá∏ To Citizens of Russia"},{"location":"#installation","text":"Run the following to install this library: $ composer require mezzio/mezzio-authentication-session","title":"Installation"},{"location":"#documentation","text":"Documentation is in the doc tree , and can be compiled using mkdocs : $ mkdocs build You may also browse the documentation online .","title":"Documentation"},{"location":"intro/","text":"document.addEventListener(\"DOMContentLoaded\", function (event) { window.location.pathname = '/mezzio-authentication-session/v1/intro/'; });","title":"_intro"},{"location":"v1/config/","text":"Configuration You will need to provide configuration for the adapter to work correctly: You will need to alias the mezzio-authentication AuthenticationInterface to the package's PhpSession implementation. You will need to ensure a mezzio-authentication UserRepositoryInterface implementation is available and configured. You will need to provide a factory capable of generating a UserInterface instance, if you do not want to use the default provided by mezzio-authentication. You will need to provide a URL or path to which the authentication middleware will redirect if no user is discovered in the session. Example Below is an example demonstrating authentication configuration you might provide when using mezzio-authentication-session. In particular: It aliases the PdoDatabase user repository implementation from mezzio-authentication as the UserRepositoryInterface service. It aliases the PhpSession adapter from this package to the AuthenticationInterface service. It does not configure a Mezzio\\Authentication\\UserInterface service, opting to use the default provided by mezzio-authentication. It configures the path /login as the URL to which unauthenticated users will be redirected. // in a config/autoload/*.global.php file: declare(strict_types=1); use Mezzio\\Authentication\\AuthenticationInterface; use Mezzio\\Authentication\\Session\\PhpSession; use Mezzio\\Authentication\\UserRepositoryInterface; use Mezzio\\Authentication\\UserRepository\\PdoDatabase; return [ 'dependencies' =&gt; [ 'aliases' =&gt; [ AuthenticationInterface::class =&gt; PhpSession::class, UserRepositoryInterface::class =&gt; PdoDatabase::class, ], ], 'authentication' =&gt; [ 'redirect' =&gt; '/login', ], ]; Handling the login Once you have configured the adapter, you will also need to write a handler that will handle login attempts .","title":"Configuration"},{"location":"v1/config/#configuration","text":"You will need to provide configuration for the adapter to work correctly: You will need to alias the mezzio-authentication AuthenticationInterface to the package's PhpSession implementation. You will need to ensure a mezzio-authentication UserRepositoryInterface implementation is available and configured. You will need to provide a factory capable of generating a UserInterface instance, if you do not want to use the default provided by mezzio-authentication. You will need to provide a URL or path to which the authentication middleware will redirect if no user is discovered in the session.","title":"Configuration"},{"location":"v1/config/#example","text":"Below is an example demonstrating authentication configuration you might provide when using mezzio-authentication-session. In particular: It aliases the PdoDatabase user repository implementation from mezzio-authentication as the UserRepositoryInterface service. It aliases the PhpSession adapter from this package to the AuthenticationInterface service. It does not configure a Mezzio\\Authentication\\UserInterface service, opting to use the default provided by mezzio-authentication. It configures the path /login as the URL to which unauthenticated users will be redirected. // in a config/autoload/*.global.php file: declare(strict_types=1); use Mezzio\\Authentication\\AuthenticationInterface; use Mezzio\\Authentication\\Session\\PhpSession; use Mezzio\\Authentication\\UserRepositoryInterface; use Mezzio\\Authentication\\UserRepository\\PdoDatabase; return [ 'dependencies' =&gt; [ 'aliases' =&gt; [ AuthenticationInterface::class =&gt; PhpSession::class, UserRepositoryInterface::class =&gt; PdoDatabase::class, ], ], 'authentication' =&gt; [ 'redirect' =&gt; '/login', ], ];","title":"Example"},{"location":"v1/config/#handling-the-login","text":"Once you have configured the adapter, you will also need to write a handler that will handle login attempts .","title":"Handling the login"},{"location":"v1/intro/","text":"mezzio-authentication-session This library provides a mezzio-authentication adapter that handles form-based username/password authentication credentials where the user details are subsequently stored in a session. When a user who has not previously authenticated hits the middleware, it will redirect to a page asking for their credentials, as a username/password combination. When they submit this page with valid credentials, the adapter will store user information (which minimally includes the username, but can also include authorization roles and other information). Subsequent requests hitting the authentication middleware will then pull the user data from the session, marking the user as authenticated.","title":"Introduction"},{"location":"v1/intro/#mezzio-authentication-session","text":"This library provides a mezzio-authentication adapter that handles form-based username/password authentication credentials where the user details are subsequently stored in a session. When a user who has not previously authenticated hits the middleware, it will redirect to a page asking for their credentials, as a username/password combination. When they submit this page with valid credentials, the adapter will store user information (which minimally includes the username, but can also include authorization roles and other information). Subsequent requests hitting the authentication middleware will then pull the user data from the session, marking the user as authenticated.","title":"mezzio-authentication-session"},{"location":"v1/login-handler/","text":"Handling an initial login When you have configured the adapter, you can drop in the mezzio-authentication AuthenticationMiddleware anywhere you need to ensure you have an authenticated user. However, how do you handle the initial authentication? In the previous chapter , we indicated that you need to configure a path to which to redirect when the adapter does not detect a user. In this chapter, we'll detail how to create a login handler for processing user credentials. Roughly, what we need to do is: Create a handler that will both display and handle a login form, redirecting to the originally requested location once a successful authentication occurs. Create a template with a form for capturing the username and password. Create a route to the new handler. Create the handler We will use the mezzio CLI tooling to generate our handler, as well as the related factory and template: $ ./vendor/bin/mezzio handler:create \"App\\Login\\LoginHandler\" By default, if you have a configured template engine, this will do the following: Create the handler for you. Create logic in the handler to render a template and return the contents in a response. Create a factory for the handler. Create a template for you in an appropriate directory. When it does these things, it provides you with the paths to each as well. In our case, we are using the PlatesPHP templating integration , with a flat application structure, and the following files were either created or updated: src/App/Login/LoginHandler.php , which contains the handler class itself. src/App/Login/LoginHandlerFactory.php , which contains the factory for the handler. config/autoload/mezzio-tooling-factories.global.php , which maps the handler to its factory for the DI container. templates/app/login.phtml , which contains our template. Now that we have created the handler, we can edit it to do the work we need. Our handler will react to two different HTTP methods. For an initial login request, the GET method will be used, and we will need to display our template. When we do, we will also memoize the originally requested URI (using the Referer request header). When the user submits the form, it will be via the POST method. When this happens, we will need to validate the submitted credentials; we will do this using the PhpSession adapter from this package. If login is successful, we will redirect to the originally requested URI, using the value we previously stored in our session. If login fails, we will display our template, adding an error message indicating the credentials were invalid. The generated handler will already compose the TemplateRendererInterface , and render a template. We will need to add a constructor dependency on the PhpSession adapter, and store that value in a property. Additionally, since we will be performing a redirect for successful POST requests, we will need to add a requirement on Laminas\\Diactoros\\Response\\RedirectResponse in addition to the logic changes in the handler. The end result should look like this: namespace App\\Login; use Psr\\Http\\Message\\ResponseInterface; use Psr\\Http\\Message\\ServerRequestInterface; use Psr\\Http\\Server\\RequestHandlerInterface; use Laminas\\Diactoros\\Response\\HtmlResponse; use Laminas\\Diactoros\\Response\\RedirectResponse; // add this line use Laminas\\Diactoros\\Uri; // add this line use Mezzio\\Authentication\\Session\\PhpSession; // add this line use Mezzio\\Session\\SessionInterface; // add this line use Mezzio\\Authentication\\UserInterface; // add this line use Mezzio\\Template\\TemplateRendererInterface; class LoginHandler implements RequestHandlerInterface { private const REDIRECT_ATTRIBUTE = 'authentication:redirect'; /** @var PhpSession */ private $adapter; /** @var TemplateRendererInterface */ private $renderer; public function __construct(TemplateRendererInterface $renderer, PhpSession $adapter) { $this-&gt;renderer = $renderer; $this-&gt;adapter = $adapter; } public function handle(ServerRequestInterface $request) : ResponseInterface { $session = $request-&gt;getAttribute('session'); $redirect = $this-&gt;getRedirect($request, $session); // Handle submitted credentials if ('POST' === $request-&gt;getMethod()) { return $this-&gt;handleLoginAttempt($request, $session, $redirect); } // Display initial login form $session-&gt;set(self::REDIRECT_ATTRIBUTE, $redirect); return new HtmlResponse($this-&gt;renderer-&gt;render( 'app::login', [] )); } private function getRedirect( ServerRequestInterface $request, SessionInterface $session ) : string { $redirect = $session-&gt;get(self::REDIRECT_ATTRIBUTE); if (! $redirect) { $redirect = new Uri($request-&gt;getHeaderLine('Referer')); if (in_array($redirect-&gt;getPath(), ['', '/login'], true)) { $redirect = '/'; } } return (string)$redirect; } private function handleLoginAttempt( ServerRequestInterface $request, SessionInterface $session, string $redirect ) : ResponseInterface { // User session takes precedence over user/pass POST in // the auth adapter so we remove the session prior // to auth attempt $session-&gt;unset(UserInterface::class); // Login was successful if ($this-&gt;adapter-&gt;authenticate($request)) { $session-&gt;unset(self::REDIRECT_ATTRIBUTE); return new RedirectResponse($redirect); } // Login failed return new HtmlResponse($this-&gt;renderer-&gt;render( 'app::login', ['error' =&gt; 'Invalid credentials; please try again'] )); } } With these changes in place, our handler is now ready. However, we need to update our factory, as we've added a new dependency! To do this, run the following from the command line, in the project root directory: $ rm src/App/Login/LoginHandlerFactory.php $ ./vendor/bin/mezzio factory:create \"App\\Login\\LoginHandler\" This will regenerate the factory for you. Edit the template We will now edit the template. The main considerations are: It needs to have a form that submits back to the login page. The form needs both a username and a password field. We need to display an error message if one was provided. Our application is built off the skeleton, and so we are currently using Bootstrap for a UI framework. We are also using PlatesPHP as noted earlier. As such, we will update the template in templates/app/login.phtml to read as follows: &lt;div class=\"container\"&gt; &lt;div class=\"row\"&gt; &lt;div class=\"col-sm\"&gt;&lt;form action=\"&lt;?= $this-&gt;url('login') ?&gt;\" method=\"post\"&gt; &lt;?php if (isset($error)) : ?&gt; &lt;div class=\"alert alert-danger\" role=\"alert\"&gt; &lt;?= $this-&gt;escapeHtml($error) ?&gt; &lt;/div&gt; &lt;?php endif ?&gt; &lt;div class=\"form-group\"&gt; &lt;label for=\"username\"&gt;Username&lt;/label&gt; &lt;input type=\"text\" class=\"form-control\" id=\"username\" name=\"username\" placeholder=\"Enter username\"&gt; &lt;/div&gt; &lt;div class=\"form-group\"&gt; &lt;label for=\"password\"&gt;Password&lt;/label&gt; &lt;input type=\"password\" class=\"form-control\" id=\"password\" name=\"password\" placeholder=\"Password\"&gt; &lt;/div&gt; &lt;button type=\"submit\" class=\"btn btn-primary\"&gt;Submit&lt;/button&gt; &lt;/form&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; Template location and structure Keep in mind the following when reading the above sample: If you are using the modular structure, the template may be in a different location. Use the output from the mezzio handler:create command to determine the exact location. If you are using a different template engine, the syntax of the template may vary. The HTML may need to vary based on your own site's UI framework and CSS. Create the route Now that we have the handler and template created, we need to create a route for the new handler that handles two HTTP methods: GET for displaying the initial form, and POST for validating submitted credentials. Open up your config/routes.php file, and edit it to add the following within its callback: $app-&gt;route( '/login', [ Mezzio\\Session\\SessionMiddleware::class, App\\Login\\LoginHandler::class, ], ['GET', 'POST'], 'login' ); Understanding the routing You may not be familiar with the route() method, or middleware pipelines. If the above doesn't make sense, keep reading for an explanation. First, we are using the route() method, as we want to create a single route to respond to multiple HTTP methods. This method has a required third argument, which is an array of HTTP methods; we specify GET and POST in this array. Second, we are indicating that we want the route to respond to the exact path /login ; we provide this via the initial method argument. Third, we are providing a name for this route via the optional fourth argument; this is what allows us to call $this-&gt;url('login') in our template in order to generate the URL to the login page. Finally, for the middleware argument, we are providing a pipeline , by providing an array of middleware to execute. The first item in the pipeline is the SessionMiddleware from mezzio-session; this is required to ensure we have a session container injected into the request. The second item is our login handler itself, which will then do the actual work of creating a response. With this route in place, any routes we write that require authentication will now: Redirect to the /login page, which will require that: A user provides credentials and submits the form back to the /login page, which will: Process the credentials via the PhpSession adapter, which will store identified user details in the session, and: Ultimately give them access (assuming any roles associated with them are authorized), and: Redirect them back to the originally requested page. In the next chapter, we will detail how to require authentication for individual handlers .","title":"Login Handlers"},{"location":"v1/login-handler/#handling-an-initial-login","text":"When you have configured the adapter, you can drop in the mezzio-authentication AuthenticationMiddleware anywhere you need to ensure you have an authenticated user. However, how do you handle the initial authentication? In the previous chapter , we indicated that you need to configure a path to which to redirect when the adapter does not detect a user. In this chapter, we'll detail how to create a login handler for processing user credentials. Roughly, what we need to do is: Create a handler that will both display and handle a login form, redirecting to the originally requested location once a successful authentication occurs. Create a template with a form for capturing the username and password. Create a route to the new handler.","title":"Handling an initial login"},{"location":"v1/login-handler/#create-the-handler","text":"We will use the mezzio CLI tooling to generate our handler, as well as the related factory and template: $ ./vendor/bin/mezzio handler:create \"App\\Login\\LoginHandler\" By default, if you have a configured template engine, this will do the following: Create the handler for you. Create logic in the handler to render a template and return the contents in a response. Create a factory for the handler. Create a template for you in an appropriate directory. When it does these things, it provides you with the paths to each as well. In our case, we are using the PlatesPHP templating integration , with a flat application structure, and the following files were either created or updated: src/App/Login/LoginHandler.php , which contains the handler class itself. src/App/Login/LoginHandlerFactory.php , which contains the factory for the handler. config/autoload/mezzio-tooling-factories.global.php , which maps the handler to its factory for the DI container. templates/app/login.phtml , which contains our template. Now that we have created the handler, we can edit it to do the work we need. Our handler will react to two different HTTP methods. For an initial login request, the GET method will be used, and we will need to display our template. When we do, we will also memoize the originally requested URI (using the Referer request header). When the user submits the form, it will be via the POST method. When this happens, we will need to validate the submitted credentials; we will do this using the PhpSession adapter from this package. If login is successful, we will redirect to the originally requested URI, using the value we previously stored in our session. If login fails, we will display our template, adding an error message indicating the credentials were invalid. The generated handler will already compose the TemplateRendererInterface , and render a template. We will need to add a constructor dependency on the PhpSession adapter, and store that value in a property. Additionally, since we will be performing a redirect for successful POST requests, we will need to add a requirement on Laminas\\Diactoros\\Response\\RedirectResponse in addition to the logic changes in the handler. The end result should look like this: namespace App\\Login; use Psr\\Http\\Message\\ResponseInterface; use Psr\\Http\\Message\\ServerRequestInterface; use Psr\\Http\\Server\\RequestHandlerInterface; use Laminas\\Diactoros\\Response\\HtmlResponse; use Laminas\\Diactoros\\Response\\RedirectResponse; // add this line use Laminas\\Diactoros\\Uri; // add this line use Mezzio\\Authentication\\Session\\PhpSession; // add this line use Mezzio\\Session\\SessionInterface; // add this line use Mezzio\\Authentication\\UserInterface; // add this line use Mezzio\\Template\\TemplateRendererInterface; class LoginHandler implements RequestHandlerInterface { private const REDIRECT_ATTRIBUTE = 'authentication:redirect'; /** @var PhpSession */ private $adapter; /** @var TemplateRendererInterface */ private $renderer; public function __construct(TemplateRendererInterface $renderer, PhpSession $adapter) { $this-&gt;renderer = $renderer; $this-&gt;adapter = $adapter; } public function handle(ServerRequestInterface $request) : ResponseInterface { $session = $request-&gt;getAttribute('session'); $redirect = $this-&gt;getRedirect($request, $session); // Handle submitted credentials if ('POST' === $request-&gt;getMethod()) { return $this-&gt;handleLoginAttempt($request, $session, $redirect); } // Display initial login form $session-&gt;set(self::REDIRECT_ATTRIBUTE, $redirect); return new HtmlResponse($this-&gt;renderer-&gt;render( 'app::login', [] )); } private function getRedirect( ServerRequestInterface $request, SessionInterface $session ) : string { $redirect = $session-&gt;get(self::REDIRECT_ATTRIBUTE); if (! $redirect) { $redirect = new Uri($request-&gt;getHeaderLine('Referer')); if (in_array($redirect-&gt;getPath(), ['', '/login'], true)) { $redirect = '/'; } } return (string)$redirect; } private function handleLoginAttempt( ServerRequestInterface $request, SessionInterface $session, string $redirect ) : ResponseInterface { // User session takes precedence over user/pass POST in // the auth adapter so we remove the session prior // to auth attempt $session-&gt;unset(UserInterface::class); // Login was successful if ($this-&gt;adapter-&gt;authenticate($request)) { $session-&gt;unset(self::REDIRECT_ATTRIBUTE); return new RedirectResponse($redirect); } // Login failed return new HtmlResponse($this-&gt;renderer-&gt;render( 'app::login', ['error' =&gt; 'Invalid credentials; please try again'] )); } } With these changes in place, our handler is now ready. However, we need to update our factory, as we've added a new dependency! To do this, run the following from the command line, in the project root directory: $ rm src/App/Login/LoginHandlerFactory.php $ ./vendor/bin/mezzio factory:create \"App\\Login\\LoginHandler\" This will regenerate the factory for you.","title":"Create the handler"},{"location":"v1/login-handler/#edit-the-template","text":"We will now edit the template. The main considerations are: It needs to have a form that submits back to the login page. The form needs both a username and a password field. We need to display an error message if one was provided. Our application is built off the skeleton, and so we are currently using Bootstrap for a UI framework. We are also using PlatesPHP as noted earlier. As such, we will update the template in templates/app/login.phtml to read as follows: &lt;div class=\"container\"&gt; &lt;div class=\"row\"&gt; &lt;div class=\"col-sm\"&gt;&lt;form action=\"&lt;?= $this-&gt;url('login') ?&gt;\" method=\"post\"&gt; &lt;?php if (isset($error)) : ?&gt; &lt;div class=\"alert alert-danger\" role=\"alert\"&gt; &lt;?= $this-&gt;escapeHtml($error) ?&gt; &lt;/div&gt; &lt;?php endif ?&gt; &lt;div class=\"form-group\"&gt; &lt;label for=\"username\"&gt;Username&lt;/label&gt; &lt;input type=\"text\" class=\"form-control\" id=\"username\" name=\"username\" placeholder=\"Enter username\"&gt; &lt;/div&gt; &lt;div class=\"form-group\"&gt; &lt;label for=\"password\"&gt;Password&lt;/label&gt; &lt;input type=\"password\" class=\"form-control\" id=\"password\" name=\"password\" placeholder=\"Password\"&gt; &lt;/div&gt; &lt;button type=\"submit\" class=\"btn btn-primary\"&gt;Submit&lt;/button&gt; &lt;/form&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;","title":"Edit the template"},{"location":"v1/login-handler/#create-the-route","text":"Now that we have the handler and template created, we need to create a route for the new handler that handles two HTTP methods: GET for displaying the initial form, and POST for validating submitted credentials. Open up your config/routes.php file, and edit it to add the following within its callback: $app-&gt;route( '/login', [ Mezzio\\Session\\SessionMiddleware::class, App\\Login\\LoginHandler::class, ], ['GET', 'POST'], 'login' );","title":"Create the route"},{"location":"v1/requiring-authentication/","text":"Configuring Handlers To Require Authentication In the previous chapter , we detailed writing a handler to display a login form for submitting credentials. That handler then redirects back to the original URL that required authentication. This means that the original handler needs to have the AuthenticationMiddleware as part of its pipeline. Additionally, this package depends on the mezzio-session SessionMiddleware being present and in the pipeline before the mezzio-authentication AuthenticationMiddleware , as the PhpSession adapter it provides requires access to the session container via the request. There are three ways to accomplish this: Requiring authentication everywhere. Requiring authentication for subpaths of the application. Requiring authentication for individual routes. Requiring authentication everywhere With this approach, every request other than the one to the login form itself will require authentication. To make this possible, you will need to decorate the mezzio-authentication AuthenticationMiddleware so that you can exclude that particular path. As an example, you could do the following in the config/pipeline.php file, before the RouteMiddleware somewhere: // Pipe in the session middleware $app-&gt;pipe(Mezzio\\Session\\SessionMiddleware::class); // Pipe a handler that checks to see if authentication is needed: $app-&gt;pipe($factory-&gt;callable( // $container is present within the callback, and refers to the DI container. function ($request, $handler) use ($container) { if ($request-&gt;getUri()-&gt;getPath() === '/login') { // Login request; do not require the authentication middleware return $handler-&gt;handle($request); } // All other requests require the authentication middleware $authenticationMiddleware = $container-&gt;get( Mezzio\\Authentication\\AuthenticationMiddleware::class ); return $authenticationMiddleware-&gt;process($request, $handler); } )); Requiring authentication for subpaths of the application If you know all handlers under a given subpath of the application require authentication, you can use Stratigility's path segregation features to add authentication. For example, consider the following within the config/pipeline.php file, which adds authentication to any path starting with /admin : // Add this within the import section of the file: use function Laminas\\Stratigility\\path; // Add this within the callback, before the routing middleware: $app-&gt;pipe(path('/admin', $factory-&gt;pipeline( Mezzio\\Session\\SessionMiddleware::class, Mezzio\\Authentication\\AuthenticationMiddleware::class ))); Requiring authentication for individual routes The most granular approach involves adding authentication to individual routes. In such cases, you will create a route-specific middleware pipeline . As an example, if we wanted authentication for each of the routes that use the path /admin/users[/\\d+] , we could do the following within our config/routes.php file: $app-&gt;get('/admin/users[/\\d+]', [ Mezzio\\Session\\SessionMiddleware::class, Mezzio\\Authentication\\AuthenticationMiddleware::class, App\\Users\\UsersHandler::class, ], 'users'); $app-&gt;post('/admin/users', [ Mezzio\\Session\\SessionMiddleware::class, Mezzio\\Authentication\\AuthenticationMiddleware::class, App\\Users\\CreateUserHandler::class, ]); $app-&gt;post('/admin/users[/\\d+]', [ Mezzio\\Session\\SessionMiddleware::class, Mezzio\\Authentication\\AuthenticationMiddleware::class, App\\Users\\UpdateUserHandler::class, ]); Note that each pipeline contains both the session and authentication middleware!","title":"Handlers Requiring Authentication"},{"location":"v1/requiring-authentication/#configuring-handlers-to-require-authentication","text":"In the previous chapter , we detailed writing a handler to display a login form for submitting credentials. That handler then redirects back to the original URL that required authentication. This means that the original handler needs to have the AuthenticationMiddleware as part of its pipeline. Additionally, this package depends on the mezzio-session SessionMiddleware being present and in the pipeline before the mezzio-authentication AuthenticationMiddleware , as the PhpSession adapter it provides requires access to the session container via the request. There are three ways to accomplish this: Requiring authentication everywhere. Requiring authentication for subpaths of the application. Requiring authentication for individual routes.","title":"Configuring Handlers To Require Authentication"},{"location":"v1/requiring-authentication/#requiring-authentication-everywhere","text":"With this approach, every request other than the one to the login form itself will require authentication. To make this possible, you will need to decorate the mezzio-authentication AuthenticationMiddleware so that you can exclude that particular path. As an example, you could do the following in the config/pipeline.php file, before the RouteMiddleware somewhere: // Pipe in the session middleware $app-&gt;pipe(Mezzio\\Session\\SessionMiddleware::class); // Pipe a handler that checks to see if authentication is needed: $app-&gt;pipe($factory-&gt;callable( // $container is present within the callback, and refers to the DI container. function ($request, $handler) use ($container) { if ($request-&gt;getUri()-&gt;getPath() === '/login') { // Login request; do not require the authentication middleware return $handler-&gt;handle($request); } // All other requests require the authentication middleware $authenticationMiddleware = $container-&gt;get( Mezzio\\Authentication\\AuthenticationMiddleware::class ); return $authenticationMiddleware-&gt;process($request, $handler); } ));","title":"Requiring authentication everywhere"},{"location":"v1/requiring-authentication/#requiring-authentication-for-subpaths-of-the-application","text":"If you know all handlers under a given subpath of the application require authentication, you can use Stratigility's path segregation features to add authentication. For example, consider the following within the config/pipeline.php file, which adds authentication to any path starting with /admin : // Add this within the import section of the file: use function Laminas\\Stratigility\\path; // Add this within the callback, before the routing middleware: $app-&gt;pipe(path('/admin', $factory-&gt;pipeline( Mezzio\\Session\\SessionMiddleware::class, Mezzio\\Authentication\\AuthenticationMiddleware::class )));","title":"Requiring authentication for subpaths of the application"},{"location":"v1/requiring-authentication/#requiring-authentication-for-individual-routes","text":"The most granular approach involves adding authentication to individual routes. In such cases, you will create a route-specific middleware pipeline . As an example, if we wanted authentication for each of the routes that use the path /admin/users[/\\d+] , we could do the following within our config/routes.php file: $app-&gt;get('/admin/users[/\\d+]', [ Mezzio\\Session\\SessionMiddleware::class, Mezzio\\Authentication\\AuthenticationMiddleware::class, App\\Users\\UsersHandler::class, ], 'users'); $app-&gt;post('/admin/users', [ Mezzio\\Session\\SessionMiddleware::class, Mezzio\\Authentication\\AuthenticationMiddleware::class, App\\Users\\CreateUserHandler::class, ]); $app-&gt;post('/admin/users[/\\d+]', [ Mezzio\\Session\\SessionMiddleware::class, Mezzio\\Authentication\\AuthenticationMiddleware::class, App\\Users\\UpdateUserHandler::class, ]); Note that each pipeline contains both the session and authentication middleware!","title":"Requiring authentication for individual routes"}]}